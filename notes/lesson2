pragma solidity >=0.7.0 <0.9.0;

contract Score {
    uint score = 5; 

    address owner;

    constructor(){
        owner = msg.sender;
    }
    //unit defines an unsigned integer of 256 bits by default

    //a getter is a function that returns a value

    //view can only read the contract storage
    //pure can neither read nor modify the contract storage

    modifier onlyOwner{
        if (msg.sender == owner) {
            _;
        }
    }

    function getScore() public view returns (uint) {
        return score;
    }


    //Para que cree la funcion getter automaticamente tmb se puede crear así: 
    //mapping(address => uint) public score_list;
    mapping (address => uint) score_list;

    function getUserScore(address user) public view returns (uint) {
        return score_list[user];
    }
    //Events to show the changes made into a contract. Solo son vistos fuera del contrato, no se pueden ver internamente by solidity. Una funcion no puede leer the event emitted by another function for instance
    //se almacenan en el transaction¿s log
    //Se llama event fuera de la función y dentro emit
    // la indexed es para crear un index that will enable to search for events vis Web3 in your fornt end
    
    event Score_set(uint indexed);
    //a setter is a function that modifies the value of a variable (modify the state of the contract)
    //you must specify the parameters when declare 
    
    function setScore(uint new_score) public onlyOwner {
        score = new_score;
        emit Score_set(new_score);
    }
}

//If we do not add this, we will have a security issue bc anyone can modify the score
//msg.sender: returns the address of the caller of the function
//msg.value: returns the value in Wei of the amount of ether sent to the function

//modifier is a special function that enables us to change the behaviour of functions in solidity
//uses to automatically check a condition before executing a function

//pueden recibir argumentos como las funciones. here is an example of a modifier that requiress the caller to send a specific amount of Ether

//modifier Fee(uint fee) {
//    if (msg.value == fee) {
//        _;
//    }
//}

// A constructor is a function that is executed only once when the contract is deployed on the Ethereum blockchain



//Mappings: complex data type. Used for association
//mappig(KeyTipe => ValueType) mapping_name;

//Arrays 
//Fixed size array: T[k] eg uint[9] one_digit_number;
//Dynamic size array: T[] eg uint[] all_possible_number;
//array_name.length: returns the number of elements the array holds. 
//array_name.push(new_element) : adds a new element at the end of the array.
